openapi: 3.0.0
info:
  title: Emprius App Backend API
  version: 1.0.0
  description: API for the Emprius App Backend service

tags:
  - name: System
    description: System-related operations like health checks and system information
  - name: Images
    description: Image upload and retrieval operations
  - name: Authentication
    description: User authentication and registration operations
  - name: Users
    description: User profile management operations
  - name: Tools
    description: Tool management and search operations
  - name: Bookings
    description: Booking management and rating operations

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://app-api.emprius.app
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Location:
      type: object
      properties:
        latitude:
          type: integer
          format: int64
          description: Latitude in microdegrees
        longitude:
          type: integer
          format: int64
          description: Longitude in microdegrees

    DateRange:
      type: object
      properties:
        from:
          type: integer
          format: uint32
          description: Start date in UNIX timestamp
        to:
          type: integer
          format: uint32
          description: End date in UNIX timestamp

    Tool:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        isAvailable:
          type: boolean
          description: Whether the tool is currently available for booking
          default: true
        mayBeFree:
          type: boolean
        askWithFee:
          type: boolean
        cost:
          type: integer
          format: uint64
        userId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the tool owner
        images:
          type: array
          items:
            type: string
            format: byte
        transportOptions:
          type: array
          items:
            type: integer
        toolCategory:
          type: integer
        location:
          $ref: '#/components/schemas/Location'
        rating:
          type: integer
          format: int32
        estimatedValue:
          type: integer
          format: uint64
        height:
          type: integer
          format: uint32
        weight:
          type: integer
          format: uint32
        reservedDates:
          type: array
          items:
            $ref: '#/components/schemas/DateRange'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: MongoDB ObjectID of the user
        name:
          type: string
        community:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        active:
          type: boolean
        avatar:
          type: string
          format: byte
        password:
          type: string
          description: "New password. Provide if you want to change the password."
        actualPassword:
          type: string
          description: "Current password. Required if changing the password."

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expirity:
          type: string
          format: date-time

    RegisterRequest:
      type: object
      required:
        - email
        - invitationToken
      properties:
        email:
          type: string
          format: email
        invitationToken:
          type: string
        name:
          type: string
        community:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        password:
          type: string

    CreateBookingRequest:
      type: object
      required:
        - toolId
        - startDate
        - endDate
      properties:
        toolId:
          type: string
          description: ID of the tool to book (as string)
        startDate:
          type: integer
          format: int64
          description: Start date as UNIX timestamp
        endDate:
          type: integer
          format: int64
          description: End date as UNIX timestamp
        contact:
          type: string
          description: Contact information for the booking
        comments:
          type: string
          description: Additional comments about the booking

    BookingRating:
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: MongoDB ObjectID of the rating
        bookingId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the rated booking
        fromUserId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the user giving the rating
        toUserId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the user receiving the rating
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating value between 1 and 5
        comment:
          type: string
          description: Optional comment about the rating
        images:
          type: array
          items:
            type: string
          description: Optional array of image hashes associated with the rating
        ratedAt:
          type: integer
          format: int64
          description: When the rating was submitted

    BookingResponse:
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: MongoDB ObjectID of the booking
        toolId:
          type: string
          description: ID of the booked tool
        fromUserId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the user making the booking
        toUserId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the tool owner
        startDate:
          type: integer
          format: int64
          description: Start date as UNIX timestamp
        endDate:
          type: integer
          format: int64
          description: End date as UNIX timestamp
        contact:
          type: string
          description: Contact information for the booking
        comments:
          type: string
          description: Additional comments about the booking
        bookingStatus:
          type: string
          enum: [PENDING, ACCEPTED, REJECTED, CANCELLED, RETURNED]
          description: Current status of the booking
        isRated:
          type: boolean
          description: Whether this booking has been rated by any party
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/BookingRating'
          description: Array of ratings associated with this booking
        # Legacy fields marked as deprecated
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Deprecated. Use ratings array instead. Legacy rating value.
          deprecated: true
        ratingComment:
          type: string
          description: Deprecated. Use ratings array instead. Legacy rating comment.
          deprecated: true
        createdAt:
          type: string
          format: date-time
          description: When the booking was created
        updatedAt:
          type: string
          format: date-time
          description: When the booking was last updated

    RatingResponse:
      type: object
      properties:
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/BookingRating'
          description: Array of ratings

    RateRequest:
      type: object
      required:
        - rating
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating value between 1 and 5
        comment:
          type: string
          description: Optional comment about the rating
          maxLength: 500
          
    RatingParty:
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: MongoDB ObjectID of the user
        rating:
          type: integer
          minimum: 1
          maximum: 5
          nullable: true
          description: Rating value between 1 and 5, null if not rated
        ratingComment:
          type: string
          nullable: true
          description: Optional comment about the rating, null if not rated
        ratedAt:
          type: integer
          format: int64
          nullable: true
          description: When the rating was submitted, null if not rated
        images:
          type: array
          items:
            type: string
          nullable: true
          description: Optional array of image hashes associated with the rating, null if not rated
          
    UnifiedRating:
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: MongoDB ObjectID of the booking
        bookingId:
          type: string
          format: objectid
          description: MongoDB ObjectID of the booking (same as id)
        owner:
          $ref: '#/components/schemas/RatingParty'
          description: Rating information for the tool owner
        requester:
          $ref: '#/components/schemas/RatingParty'
          description: Rating information for the requester

paths:
  /ping:
    get:
      tags:
        - System
      summary: Health check endpoint
      responses:
        '200':
          description: Server is alive
          content:
            text/plain:
              schema:
                type: string
                example: "."

  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful

  /info:
    get:
      tags:
        - System
      summary: Get system information including user count, tool count, categories and transports
      description: Public endpoint that provides general system statistics
      responses:
        '200':
          description: System information
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: integer
                    description: Total number of users
                  tools:
                    type: integer
                    description: Total number of tools
                  categories:
                    type: array
                    items:
                      type: object
                  transports:
                    type: array
                    items:
                      type: object

  /refresh:
    get:
      tags:
        - Authentication
      summary: Refresh JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: New JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get paginated list of users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
            description: Page number for pagination (0-based, 16 items per page)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the user
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /images/{hash}:
    get:
      tags:
        - Images
      summary: Get image by hash
      description: Public endpoint that returns the binary image data directly
      parameters:
        - name: hash
          in: path
          required: true
          schema:
            type: string
            description: Hex-encoded SHA256 hash of the image
        - name: thumbnail
          in: query
          required: false
          schema:
            type: boolean
            description: If true, returns a thumbnail version of the image with max dimension of 512px
      responses:
        '200':
          description: Image file
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid hash format
        '404':
          description: Image not found

  /images:
    post:
      tags:
        - Images
      summary: Upload an image
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  hash:
                    type: string

  /tools/user/{id}:
    get:
      tags:
        - Tools
      summary: Get tools by user ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the user
      responses:
        '200':
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'

  /profile:
    get:
      tags:
        - Users
      summary: Get user profile
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    post:
      tags:
        - Users
      summary: Update user profile
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: Profile updated successfully

  /tools:
    get:
      tags:
        - Tools
      summary: Get user's own tools
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
    post:
      tags:
        - Tools
      summary: Add a new tool
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        '200':
          description: Tool added successfully

  /tools/search:
    get:
      tags:
        - Tools
      summary: Search tools
      security:
        - bearerAuth: [ ]
      parameters:
        - name: term
          in: query
          schema:
            type: string
        - name: categories
          in: query
          schema:
            type: array
            items:
              type: integer
        - name: distance
          in: query
          schema:
            type: integer
        - name: maxCost
          in: query
          schema:
            type: integer
            format: uint64
        - name: mayBeFree
          in: query
          schema:
            type: boolean
        - name: transportOptions
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Array of transport option IDs to filter by
          example: [1, 2]
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'

  /tools/{id}:
    get:
      tags:
        - Tools
      summary: Get tool by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Tool details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'

  /tools/{id}/rates:
    get:
      tags:
        - Tools
      summary: Get ratings for a tool
      description: Get all ratings associated with a tool's bookings
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of unified ratings for the tool
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnifiedRating'
        '400':
          description: Invalid tool ID
        '401':
          description: Unauthorized
        '404':
          description: Tool not found
        '500':
          description: Internal server error
    put:
      tags:
        - Tools
      summary: Update tool
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        '200':
          description: Tool updated successfully
    delete:
      tags:
        - Tools
      summary: Delete tool
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Tool deleted successfully

  /bookings:
    post:
      tags:
        - Bookings
      summary: Create a new booking request
      description: |
        Creates a new booking request for a tool. Multiple pending requests can exist for the same tool and dates.
        Once a booking is accepted, new booking requests for overlapping dates will be rejected.
        Other pending requests for those dates can still be accepted or rejected by the tool owner.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '200':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: |
            Bad request. Possible reasons:
            - Invalid request body
            - Invalid tool ID
            - Tool not found
            - Booking dates conflict with existing accepted booking

  /bookings/requests:
    get:
      tags:
        - Bookings
      summary: Get booking requests
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of booking requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'

  /bookings/petitions:
    get:
      tags:
        - Bookings
      summary: Get booking petitions
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of booking petitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'

  /bookings/{bookingId}:
    get:
      tags:
        - Bookings
      summary: Get booking by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'

  /bookings/petitions/{petitionId}/accept:
    post:
      tags:
        - Bookings
      summary: Accept a booking petition
      description: Tool owner accepts a booking request. Updates booking status and tool's reserved dates.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: petitionId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking petition
      responses:
        '200':
          description: Petition accepted successfully
        '403':
          description: Only tool owner can accept petitions
        '404':
          description: Booking not found
        '400':
          description: Can only accept pending petitions

  /bookings/petitions/{petitionId}/deny:
    post:
      tags:
        - Bookings
      summary: Deny a booking petition
      description: Tool owner denies a booking request
      security:
        - bearerAuth: [ ]
      parameters:
        - name: petitionId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking petition
      responses:
        '200':
          description: Petition denied successfully
        '403':
          description: Only tool owner can deny petitions
        '404':
          description: Booking not found
        '400':
          description: Can only deny pending petitions

  /bookings/requests/{petitionId}/cancel:
    post:
      tags:
        - Bookings
      summary: Cancel a booking request
      description: Requester cancels their own booking request
      security:
        - bearerAuth: [ ]
      parameters:
        - name: petitionId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking petition
      responses:
        '200':
          description: Request cancelled successfully
        '403':
          description: Only requester can cancel their requests
        '404':
          description: Booking not found
        '400':
          description: Can only cancel pending requests

  /bookings/{bookingId}/return:
    post:
      tags:
        - Bookings
      summary: Return a booking
      security:
        - bearerAuth: [ ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking
      responses:
        '200':
          description: Booking returned successfully

  /bookings/user/{id}:
    get:
      tags:
        - Bookings
      summary: Get paginated bookings for a user
      description: Returns both requests and petitions for a user, ordered by date (newest first)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the user
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
            description: Page number for pagination (0-based, 16 items per page)
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Invalid page number or user ID
        '401':
          description: Unauthorized

  /bookings/rates:
    get:
      tags:
        - Bookings
      summary: Get pending ratings
      description: Get bookings that need to be rated by the user
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of bookings pending rating
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /bookings/rates/submitted:
    get:
      tags:
        - Bookings
      summary: Get submitted ratings
      description: Get ratings submitted by the user (excluding self-ratings). Deprecated, use /user/{id}/rates instead.
      deprecated: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of submitted ratings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /bookings/rates/received:
    get:
      tags:
        - Bookings
      summary: Get received ratings
      description: Get ratings received by the user (excluding self-ratings). Deprecated, use /user/{id}/rates instead.
      deprecated: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of received ratings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          
  /user/{id}/rates:
    get:
      tags:
        - Bookings
      summary: Get unified ratings for a user
      description: Get all ratings (both submitted and received) for a user, grouped by booking
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the user
      responses:
        '200':
          description: List of unified ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnifiedRating'
        '400':
          description: Invalid user ID
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /bookings/{bookingId}/rate:
    post:
      tags:
        - Bookings
      summary: Rate a booking
      description: Rate a booking after it has been returned. Only users involved in the booking can rate it, and each user can only rate once.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateRequest'
      responses:
        '200':
          description: Rating submitted successfully
        '400':
          description: Invalid request or rating value (must be between 1-5)
        '401':
          description: Unauthorized
        '403':
          description: Cannot rate (already rated or not involved in booking)
        '404':
          description: Booking not found
        '500':
          description: Internal server error
    get:
      tags:
        - Bookings
      summary: Get ratings for a booking
      description: Get all ratings associated with a specific booking
      security:
        - bearerAuth: [ ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: objectid
            description: MongoDB ObjectID of the booking
      responses:
        '200':
          description: Ratings for the booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  ratings:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookingRating'
                    description: Array of ratings associated with this booking
        '401':
          description: Unauthorized
        '404':
          description: Booking not found
        '500':
          description: Internal server error

  /bookings/pendings:
    get:
      tags:
        - Bookings
      summary: Get count of pending booking actions. Booking requests and pending ratings.
      description: Returns the number of pending booking actions for the authenticated user
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Count of pending actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      pendingRatingsCount:
                        type: integer
                        format: int64
                        description: Number of pending ratings
                      pendingRequestsCount:
                        type: integer
                        format: int64
                        description: Number of pending booking requests
        '401':
          description: Unauthorized
