package db

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// StartMongoContainer creates and starts an instance of the MongoDB container.
func StartMongoContainer(ctx context.Context) (testcontainers.Container, error) {
	return testcontainers.GenericContainer(ctx,
		testcontainers.GenericContainerRequest{
			ContainerRequest: testcontainers.ContainerRequest{
				Image:        "mongo",
				ExposedPorts: []string{"27017/tcp"},
				WaitingFor: wait.ForAll(
					wait.ForLog("Waiting for connections"),
					wait.ForListeningPort("27017/tcp"),
				),
			},
			Started: true,
		})
}

// DBNameLen is the length of a database name generated by RandomDatabaseName.
const DBNameLen = 15

// DBNameChars is the set of characters used by RandomDatabaseName.
const DBNameChars = "abcdefghijklmnopqrstuvwxyz"

// RandomDatabaseName generates a random valid MongoDB database name.
func RandomDatabaseName() string {
	dbChars := make([]byte, DBNameLen)
	for i := 0; i < DBNameLen; i++ {
		bigN, err := rand.Int(rand.Reader, big.NewInt(int64(len(DBNameChars))))
		if err != nil {
			panic(fmt.Errorf("error getting a random int: %w", err))
		}
		dbChars[i] = DBNameChars[int(bigN.Int64())]
	}
	return string(dbChars)
}

// CreateTestUser creates a test user and returns the inserted user ID
func CreateTestUser(ctx context.Context, userService *UserService, email string, name string) (primitive.ObjectID, error) {
	user := &User{
		Email:    email,
		Name:     name,
		Password: []byte("testpassword"),
		Active:   true,
		Tokens:   1000,
		Rating:   50,
		Location: DBLocation{
			Type: "Point",
			Coordinates: []float64{
				2.492793,  // longitude
				41.695384, // latitude
			},
		},
		Verified: true,
	}

	result, err := userService.InsertUser(ctx, user)
	if err != nil {
		return primitive.NilObjectID, err
	}

	return result.InsertedID.(primitive.ObjectID), nil
}

// CreateTestUserWithDetails creates a test user with specific details
func CreateTestUserWithDetails(ctx context.Context, userService *UserService, user *User) (primitive.ObjectID, error) {
	// Set defaults if not provided
	if user.Password == nil {
		user.Password = []byte("testpassword")
	}
	if user.Tokens == 0 {
		user.Tokens = 1000
	}
	if user.Rating == 0 {
		user.Rating = 50
	}
	// Default to active if not explicitly set
	if !user.Active {
		user.Active = true
	}

	result, err := userService.InsertUser(ctx, user)
	if err != nil {
		return primitive.NilObjectID, err
	}

	return result.InsertedID.(primitive.ObjectID), nil
}

// SetupTestUserAndTools creates a test user and associates tools with that user
func SetupTestUserAndTools(ctx context.Context, userService *UserService, toolService *ToolService, toolCount int) (primitive.ObjectID, []*Tool, error) {
	// Create test user
	userID, err := CreateTestUser(ctx, userService, "testuser@example.com", "Test User")
	if err != nil {
		return primitive.NilObjectID, nil, err
	}

	// Create test location
	location := DBLocation{
		Type: "Point",
		Coordinates: []float64{
			2.492793,  // longitude
			41.695384, // latitude
		},
	}

	// Create tools associated with the user
	var tools []*Tool
	for i := 1; i <= toolCount; i++ {
		tool := &Tool{
			ID:           int64(i),
			UserID:       userID,
			Title:        fmt.Sprintf("Test Tool %d", i),
			Description:  "Test description for tool",
			IsAvailable:  true,
			Location:     location,
			ToolCategory: 1,
		}
		_, err := toolService.InsertTool(ctx, tool)
		if err != nil {
			return primitive.NilObjectID, nil, err
		}
		tools = append(tools, tool)
	}

	return userID, tools, nil
}
